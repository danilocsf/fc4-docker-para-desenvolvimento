FROM node:22.8.0-slim

ARG NODEMON_VERSION=3.1.7

# Adicionando o curl e o nodemon na imagem
RUN apt update && \
    apt install -y curl && \
    npm install -g nodemon@${NODEMON_VERSION}
# Poderia ter sido feito desta forma
# RUN apt update
# RUN apt install -y curl
# RUN npm intall -g nodemon
# Porém a imagem ficaria maior, pois haveria 2 layers na imagem. 
# Quanto mais layers, maior a imagem. Sempre que possível, junte comandos RUN

# A imagem node possui um usuário não root padrão chamado node (id 1000)
# Supondo que a imagem node não possuisse um usuário não root
# e fosse necessário criar um usuário xpto com id 1000
# deveria então ser criado desta forma:
#debian
# RUN useradd -m -u 1000 xpto
#alpine
# RUN useradd -D -u 1000 danilo

# Workaround de permissão do workdir:
# Em algumas versões do docker pode ocorrer de ao criar o WORKDIR
#a pasta criada esteja com permissão para o usuário root. 
#Sendo assim é necessário criar a pasta e dar permissão antes de definir o 
#WORKDIR e o USER   
#RUN mkdir -p /home/node/app && chown -R node:node /home/node/app

# Copia o script para o diretório raiz
# Usando o COPY, o dono do arquivo é o root, mesmo que seja feito após
# definir o usuário node (USER node)
# Por tanto, é o root quem deve dar permissão de execução ao script
COPY script/start.sh /

RUN chmod +x /start.sh


USER node
# O que vier daqui pra baixo tem permissões imitadas ao usuário node
# se dentro do container forem sincronizados arquivos da máquina, 
# terão permissão do usuário node, por exemplo

WORKDIR /home/node/app

#Comandos COPY e RUN comentados, pois como está sendo utilizado volume
#não faz mais sentido a utilização deles
# Copia o package.json para o diretório corrente (WORKDIR)
#COPY package.json ./
#RUN npm install 

# EXPOSE serve apenas para documentar que essa porta será utilizada
EXPOSE 3000

CMD [ "/start.sh" ]

